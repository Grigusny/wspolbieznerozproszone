sortowanie plikow i ich zawartosci, wczytanie plikow przydzielanie pamieci dla poszczegolnych plkow, zeby nie rezerwowalo duzo pamieci dla malych plikow itd plikow posortowanie zawartosci w plikach

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Main  {

	public static void main(String[] args) {
		ArrayList<Sortowanie> listaSortowania = new ArrayList<>();
		ArrayList<File> listaPlikow = new ArrayList<>();
		File folder = new File("plikiSort");
		folder.mkdir();
		for(int j=0;j<20;j++) {
			listaPlikow.add(stworzPlik(j+1));
			}
		
		for(int j=0;j<20;j++) {
			Sortowanie sortowanie = new Sortowanie(listaPlikow.get(j));
			listaSortowania.add(sortowanie);
			}
		
			ExecutorService executor = Executors.newFixedThreadPool(4); // executor definicja Wykonawca, prowadzący pulę wątków o zadanych maksymalnych rozmiarach (Executors.newFixedThreadPool()),
Wykonawca, prowadzący pulę wątków o dynamicznych rozmiarach — to najlepsza metoda na uruchamianie własnych wątków — pozwala nam tworzyć pule wątków, delegować im zadania, tworzyć zadania cykliczne, kończyć pracę wątków w kontrolowany sposób i wiele więcej; tą metodą zajmiemy się w dzisiejszej lekcji //
			try {
				executor.invokeAll(listaSortowania);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			executor.shutdown();
	}

	
	public static File stworzPlik (int numer) {
		File plik = new File("plikiSort/plik"+numer+".txt");
		int iloscLiczb = ThreadLocalRandom.current().nextInt(100, 1000001);
		try {
			BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(plik));
			for(int i=0;i<iloscLiczb;i++) {
				int wartoscLiczby = ThreadLocalRandom.current().nextInt(100, 1000001);
				bufferedWriter.write(wartoscLiczby+System.getProperty("line.separator"));
			}
		} catch (IOException e) {
			
			e.printStackTrace();
		}
				return plik;
	}
}





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.concurrent.Callable;

public class Sortowanie implements Callable<Integer> { // dlaczego callable, a nie runnable roznica ew inne metody rozwiazania niz executor Runnable'a z tą różnicą, że Callable jest interfejsem generycznym, zdolnym do zwracania dowolnego typu wyników. //

	File plik;
	private BufferedReader bufferedReader;
	private BufferedWriter bufferedWriter;
	public Sortowanie(File plik) {
		this.plik = plik;
	}
	public Integer call() { // dzialanie funkcji call wywołuje funkcję z zadanym kontekstem i argumentami. //
		ArrayList<Integer> lista = new ArrayList<>();
		
		try {
			bufferedReader = new BufferedReader(new FileReader(plik));
			String tmp;
 			while((tmp=bufferedReader.readLine())!=null) {
 				lista.add(Integer.parseInt(tmp));
			}
 			Collections.sort(lista);
 			bufferedWriter = new BufferedWriter(new FileWriter(plik));
 			for(int k=0;k<lista.size();k++) {
 				bufferedWriter.write(lista.get(k)+System.getProperty("line.separator")); // co to jest get.property jak dziala getProperty(String key), odpowiednio ustawiająca i pobierająca właściwość o zadanym kluczu. Metoda wczytująca przeszukuje mapę, jeśli nie znajdzie danego klucza szuka dalej w wartościach domyślnych. W przypadku dalszego niepowodzenia poszukiwania zadanego klucza, metoda na wyjściu dajenull. ///
 			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return 1;	
	}	
}
a invokeAll powoduje, idą po kolei z listy taski do wykonania na 4 watkach
no własnie tym się różni
lista plikow to po prostu lista plików
a lista sortowania to lista zadan do wykonania
dlatego executor sie wykrzacza kiedy dajesz liste plikow

 Callable ponieważ metoda call wraca return 1
a zwykły wątek tego nie umożliwia
zamiast metody run masz call

try catch to do łapania wyjątków jak dobrze to rozumiem to  działasz ma pikach w trakcie działania programu możesz stracić dostęp do tego pliku i a by nie wysypać całej aplikacji łapiemy wyjątek i w twoim wypadku wyświetlamy informacje  wyjątku ale program dalej działa bez tego porostu by się wysypał
Ok

odnośnie System.getProperty("line.separator")
No

to jest od separatora linii pobiera to znak tego separatora z danego systemu na którym jest uruchomimy program
np windows ma coś takiego \r\n
na linux \n
i aby program działał poprawnie na każdym systemie pobiera się info o tym separatorze
Ta
Ale pytal jaka wartosc
I dlaczego jak zmienic integer
Na double
O nie dziala juz ten return

zwraca 1
Wiem

pytanie w którym miejscu zmieniłeś
public Integer call()
Na double

implements Callable<Integer> jeszcze tutaj zmień
i powinno działać
tak my się przynajmniej wydaję

dlaczego jak zmieni
Integer na double
Dlaczego nie dziala
I tak pewnie by mnie zapytal czemu

należy też pamiętać że integer a Integer to nie to samo tak samo jest z Double double

 zmienil na Double

nazwy pisane z Wielkiej litery to typy referencyjne a z małej to typy prymitywne
np jak masz int a ; i nic tam nie wstawisz to masz tam 0 a jeżeli masz Integer a; i nic tam nie wstawisz to masz null

Zarządzanie wątkami (Executor)
Pakiet java.util.concurrent oferuje narzędzia do zarządzania pulami wątków, pozwalające na oddzielenie wątku od wykonywanej przez niego pracy.

Pracę, która ma tylko efekty uboczne, reprezentuje obiekt klasy implementującej interfejs java.lang.Runnable. Praca, której efektem jest obliczenie wartości, jest reprezentowana przez obiekt klasy implementującej interfejs java.util.concurrent.Callable<V> z metodą

V call() throws Exception
W klasie java.util.concurrent.Executors metoda

static ExecutorService newFixedThreadPool(int nThreads)
daje obiekt klasy java.util.concurrent.ExecutorService reprezentujący pulę nThreads wątków.

Pula wątków ma metodę

<V> Future<V> submit(Callable<V> task)
zlecającą wykonanie obliczenia task. Daje ona obiekt klasy java.util.concurrent.Future<V> z metodą

V get() throws InterruptedException, ExecutionException
czekającą na zakończenie obliczenia i odczytującą jego wynik. Jeśli obliczenie zostało przerwane wyjątkiem, dostajemy wyjątek klasy java.util.concurrent.ExecutionException.

Pracę puli wątków kończy metoda

void shutdown()
